{"version":3,"sources":["components/Header.js","components/PopupWithForm.js","contexts/CurrentUserContext.js","components/Card.js","components/ImagePopup.js","components/Main.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/Footer.js","utils/utils.js","utils/api.js","components/App.js","serviceWorker.js","index.js","images/header-logo.svg"],"names":["Header","className","src","headerLogo","alt","PopupWithForm","props","name","isOpen","action","method","onSubmit","title","children","type","aria-label","onClick","onClose","CurrentUserContext","React","createContext","Card","currentUser","useContext","isOwn","card","owner","_id","cardDeleteButtonClassName","isLiked","likes","some","i","cardLikeButtonClassName","cardLink","cardName","onCardClick","onCardDelete","onCardLike","cardLikesLength","ImagePopup","link","Main","onEditAvatar","avatar","onEditProfile","about","onAddPlace","cards","map","key","length","onCardImage","selectedCard","onCloseAllPopups","EditProfilePopup","useState","setName","description","setDescription","useEffect","e","preventDefault","inputListValuesObject","onUpdateUser","id","placeholder","required","minLength","maxLength","value","onChange","target","EditAvatarPopup","inputRef","useRef","inputValueObject","current","onUpdateAvatar","ref","AddPlacePopup","place","setPlace","setLink","Footer","api","baseUrl","headers","this","res","ok","json","Promise","reject","status","fetch","then","_checkPromise","profileNewInfo","body","JSON","stringify","item","cardId","isWillLike","currentQueryMethod","authorization","App","isEditProfilePopupOpen","setIsEditProfilePopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","setSelectedCard","setCurrentUser","setCards","closeAllPopups","getUserInfo","initialUserInfo","catch","err","console","error","getInitialCards","initialCards","Provider","changeLikeCardStatus","newCard","newCards","c","deleteCard","filter","patchProfileInfo","newUserInfo","patchAvatar","editedAvatar","postNewCard","newCardObject","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.1ffcd934.chunk.js","sourcesContent":["import React from 'react';\r\nimport headerLogo from '../images/header-logo.svg';\r\n\r\nfunction Header() {\r\n  // Возвращаем JSX-разметку компонента Header\r\n  return (\r\n    <header className=\"header\">\r\n      <img className=\"header__logo\" src={headerLogo} alt=\"логотип Mesto Russia\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nfunction PopupWithForm(props) {\r\n  // Возвращаем JSX-разметку компонента PopupWithForm\r\n  return (\r\n    <section className={`popup popup_type_${props.name} ${props.isOpen ? 'popup_opened' : ''}`}>\r\n      <form className={`popup__container popup__container_type_${props.name}`} name={`popup__container_type_${props.name}`} action=\"#\" method=\"POST\" onSubmit={props.onSubmit}>\r\n        <h2 className={`popup__title popup__title_type_${props.name}`}>{props.title}</h2>\r\n        {props.children}\r\n      </form>\r\n      <button className={`popup__close-icon popup__close-icon_type_${props.name}`} type=\"button\" aria-label=\"Закрыть\" onClick={props.onClose} />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default PopupWithForm;\r\n","import React from 'react';\r\n\r\nexport const CurrentUserContext = React.createContext();\r\n","import React from 'react';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\r\n\r\nfunction Card(props) {\r\n  // Подписываемся на контекст CurrentUserContext\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n  // Определяем, являемся ли мы владельцем текущей карточки\r\n  const isOwn = props.card.owner._id === currentUser._id;\r\n  // Создаём переменную, которую после зададим в `className` для кнопки удаления\r\n  const cardDeleteButtonClassName = (`${isOwn ? 'cards-list__delete-icon' : 'cards-list__delete-icon cards-list__delete-icon_hidden'}`);\r\n  // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\r\n  const isLiked = props.card.likes.some(i => i._id === currentUser._id);\r\n  // Создаём переменную, которую после зададим в `className` для кнопки лайка\r\n  const cardLikeButtonClassName = (`${isLiked ? 'cards-list__like-icon cards-list__like-icon_active' : 'cards-list__like-icon'}`);;\r\n\r\n  function handleClick() {\r\n    props.onCardClick(props.card);\r\n  }\r\n\r\n  function handleLikeClick() {\r\n    props.onCardLike(props.card);\r\n  }\r\n\r\n  function handleDeleteClick() {\r\n    props.onCardDelete(props.card);\r\n  }\r\n\r\n  // Возвращаем JSX-разметку компонента Card\r\n  return (\r\n    <li className=\"cards-list__item\">\r\n      <img className=\"cards-list__image\" src={props.cardLink} alt={props.cardName} onClick={handleClick} />\r\n      <button className={cardDeleteButtonClassName} type=\"button\" aria-label=\"Удалить\" onClick={handleDeleteClick} />\r\n      <div className=\"cards-list__area\">\r\n        <h3 className=\"cards-list__title\">{props.cardName}</h3>\r\n        <div className=\"cards-list__like-area\">\r\n          <button className={cardLikeButtonClassName} type=\"button\" aria-label=\"Нравится\" onClick={handleLikeClick} />\r\n          <p className=\"cards-list__like-amount-text\">{props.cardLikesLength}</p>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nfunction ImagePopup(props) {\r\n  // Возвращаем JSX-разметку компонента ImagePopup\r\n  return (\r\n    <section className={`popup popup_type_images ${props.card ? 'popup_opened' : ''}`}>\r\n      <div className=\"popup__image-container\">\r\n        <button className=\"popup__close-icon popup__close-icon_type_images\" type=\"button\" aria-label=\"Закрыть\" onClick={props.onClose} />\r\n        <img className=\"popup__image\" src={`${props.card.link}`} alt={props.card.name} />\r\n        <p className=\"popup__caption\">{props.card.name}</p>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ImagePopup;\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport Card from './Card';\r\nimport ImagePopup from './ImagePopup';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\r\n\r\nfunction Main(props) {\r\n  // Подписываемся на контекст CurrentUserContext\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n\r\n  // Возвращаем JSX-разметку компонента Main\r\n  return (\r\n    <main className=\"content\">\r\n      <section className=\"profile\">\r\n        <div className=\"profile__container\">\r\n          <div className=\"profile__area\">\r\n            <button className=\"profile__avatar-edit-button\" type=\"button\" aria-label=\"Редактировать аватар\" onClick={props.onEditAvatar}>\r\n              <img className=\"profile__avatar\" alt=\"Аватар пользователя\" src={`${currentUser.avatar}`} />\r\n            </button>\r\n            <div className=\"profile__info\">\r\n              <h1 className=\"profile__title\">{currentUser.name}</h1>\r\n              <button className=\"profile__edit-button\" type=\"button\" aria-label=\"Редактировать\" onClick={props.onEditProfile} />\r\n              <p className=\"profile__subtitle\">{currentUser.about}</p>\r\n            </div>\r\n          </div>\r\n          <button className=\"profile__add-button\" type=\"button\" aria-label=\"Добавить\" onClick={props.onAddPlace} />\r\n        </div>\r\n      </section>\r\n\r\n      <section className=\"elements\">\r\n        <ul className=\"cards-list\">\r\n          {props.cards.map(card =>\r\n            <Card card={card} key={card._id} cardName={card.name} cardLikesLength={card.likes.length} cardLink={card.link} onCardClick={props.onCardImage} onCardLike={props.onCardLike} onCardDelete={props.onCardDelete} />\r\n          )}\r\n        </ul>\r\n      </section>\r\n\r\n      <PopupWithForm name=\"card-deletion\" title=\"Вы уверены?\">\r\n        <button className=\"popup__save-button popup__save-button_type_card-deletion\" type=\"submit\">Да</button>\r\n      </PopupWithForm>\r\n\r\n      <ImagePopup card={props.selectedCard} onClose={props.onCloseAllPopups} />\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\r\n\r\nfunction EditProfilePopup(props) {\r\n  // Определяем переменные внутреннего состояния\r\n  const [name, setName] = React.useState('');\r\n  const [description, setDescription] = React.useState('');\r\n  // Подписываемся на контекст CurrentUserContext\r\n  const currentUser = React.useContext(CurrentUserContext);\r\n\r\n  React.useEffect(() => {\r\n    setName(currentUser.name);\r\n    setDescription(currentUser.about);\r\n  }, [currentUser]);\r\n\r\n  // Функция-обработчик изменения инпута имени обновляет стейт name\r\n  function handleChangeName(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  // Функция-обработчик изменения инпута занятия обновляет стейт description\r\n  function handleChangeDescription(e) {\r\n    setDescription(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const inputListValuesObject = {\r\n      name,\r\n      about: description,\r\n    }\r\n    // Передаём объект inputListValuesObject со значениями управляемых компонентов во внешний обработчик\r\n    props.onUpdateUser(inputListValuesObject);\r\n  }\r\n\r\n  // Возвращаем JSX-разметку компонента EditProfilePopup\r\n  return (\r\n    <PopupWithForm name=\"profile\" title=\"Редактировать профиль\" isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit}>\r\n      <input className=\"popup__field popup__field_el_name\" type=\"text\" name=\"popup__field_el_name\" id=\"name-field\" placeholder=\"Имя\" required minLength=\"2\" maxLength=\"40\" value={name} onChange={handleChangeName} />\r\n      <span className=\"popup__error\" id=\"name-field-error\" />\r\n      <input className=\"popup__field popup__field_el_profession\" type=\"text\" name=\"popup__field_el_profession\" id=\"profession-field\" placeholder=\"Занятие\" required minLength=\"2\" maxLength=\"200\" value={description} onChange={handleChangeDescription} />\r\n      <span className=\"popup__error\" id=\"profession-field-error\" />\r\n      <button className=\"popup__save-button popup__save-button_type_profile\" type=\"submit\">Сохранить</button>\r\n    </PopupWithForm>\r\n  );\r\n}\r\n\r\nexport default EditProfilePopup;\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\n\r\nfunction EditAvatarPopup(props) {\r\n  // Определяем переменную объекта, возвращаемого хуком\r\n  const inputRef = React.useRef();\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const inputValueObject = {\r\n      avatar: inputRef.current.value,\r\n    }\r\n    // Передаём объект inputValueObject со значениями управляемых компонентов во внешний обработчик\r\n    props.onUpdateAvatar(inputValueObject);\r\n  }\r\n\r\n  // Возвращаем JSX-разметку компонента EditAvatarPopup\r\n  return (\r\n    <PopupWithForm name=\"avatar\" title=\"Обновить аватар\" isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit}>\r\n      <input className=\"popup__field popup__field_el_avatar\" type=\"url\" name=\"avatar\" id=\"avatar-field\" placeholder=\"Ссылка на картинку\" required ref={inputRef} />\r\n      <span className=\"popup__error\" id=\"avatar-field-error\" />\r\n      <button className=\"popup__save-button popup__save-button_type_avatar\" type=\"submit\">Сохранить</button>\r\n    </PopupWithForm>\r\n  );\r\n}\r\n\r\nexport default EditAvatarPopup;\r\n","import React from 'react';\r\nimport PopupWithForm from './PopupWithForm';\r\n\r\nfunction AddPlacePopup(props) {\r\n  // Определяем переменные внутреннего состояния\r\n  const [place, setPlace] = React.useState('');\r\n  const [link, setLink] = React.useState('');\r\n\r\n  // Функция-обработчик изменения инпута имени обновляет стейт name\r\n  function handleChangePlace(e) {\r\n    setPlace(e.target.value);\r\n  }\r\n\r\n  // Функция-обработчик изменения инпута занятия обновляет стейт description\r\n  function handleChangeLink(e) {\r\n    setLink(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    const inputListValuesObject = {\r\n      name: place,\r\n      link,\r\n    }\r\n    // Передаём объект inputListValuesObject со значениями управляемых компонентов во внешний обработчик\r\n    props.onAddPlace(inputListValuesObject);\r\n  }\r\n\r\n  // Возвращаем JSX-разметку компонента AddPlacePopup\r\n  return (\r\n    <PopupWithForm name=\"cards\" title=\"Новое место\" isOpen={props.isOpen} onClose={props.onClose} onSubmit={handleSubmit}>\r\n      <input className=\"popup__field popup__field_el_place\" type=\"text\" name=\"name\" id=\"place-field\" placeholder=\"Название\" required minLength=\"1\" maxLength=\"30\" value={place} onChange={handleChangePlace} />\r\n      <span className=\"popup__error\" id=\"place-field-error\" />\r\n      <input className=\"popup__field popup__field_el_link\" type=\"url\" name=\"link\" id=\"link-field\" placeholder=\"Ссылка на картинку\" required value={link} onChange={handleChangeLink} />\r\n      <span className=\"popup__error\" id=\"link-field-error\" />\r\n      <button className=\"popup__save-button popup__save-button_type_cards\" type=\"submit\">Создать</button>\r\n    </PopupWithForm>\r\n  );\r\n}\r\n\r\nexport default AddPlacePopup;\r\n","import React from 'react';\r\n\r\nfunction Footer() {\r\n  // Возвращаем JSX-разметку компонента Footer\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p className=\"footer__copyright\">&copy; 2020 Mesto Russia</p>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import { Api } from './api.js';\r\n\r\n// Создаём объект api класса Api\r\nconst api = new Api({\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-13',\r\n  headers: {\r\n    authorization: 'fec7b8f9-403f-4d91-ad40-57682e4afbf3',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nexport { api };\r\n","class Api {\r\n  constructor({ baseUrl, headers = {} }) {\r\n    this.baseUrl = baseUrl;\r\n    this.headers = headers;\r\n  }\r\n\r\n  // Метод проверки промиса с его разрешением или отклонением в зависимости от ответа сервера\r\n  _checkPromise(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    }\r\n\r\n    // Если ошибка, отклоняем промис\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  // Публичный метод загрузки с сервера информации о пользователе\r\n  getUserInfo() {\r\n    return fetch(`${this.baseUrl}/users/me`, {\r\n      method: 'GET',\r\n      headers: this.headers\r\n    })\r\n      .then(res => this._checkPromise(res));\r\n  }\r\n\r\n  // Публичный метод загрузки с сервера начальных карточек\r\n  getInitialCards() {\r\n    return fetch(`${this.baseUrl}/cards`, {\r\n      method: 'GET',\r\n      headers: this.headers\r\n    })\r\n      .then(res => this._checkPromise(res));\r\n  }\r\n\r\n  // Публичный метод редактирования профиля с сохранением данных на сервере\r\n  patchProfileInfo(profileNewInfo) {\r\n    return fetch(`${this.baseUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this.headers,\r\n      body: JSON.stringify(profileNewInfo)\r\n    })\r\n      .then(res => this._checkPromise(res));\r\n  }\r\n\r\n  // Публичный метод добавления на сервер новой карточки\r\n  postNewCard(item) {\r\n    return fetch(`${this.baseUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: this.headers,\r\n      body: JSON.stringify(item)\r\n    })\r\n      .then(res => this._checkPromise(res));\r\n  }\r\n\r\n  // Публичный метод удаления из сервера карточки\r\n  deleteCard(cardId) {\r\n    return fetch(`${this.baseUrl}/cards/${cardId}`, {\r\n      method: 'DELETE',\r\n      headers: this.headers\r\n    })\r\n      .then(res => this._checkPromise(res));\r\n  }\r\n\r\n  // Публичный метод изменения статуса \"лайка\" карточки на сервере\r\n  changeLikeCardStatus(cardId, isWillLike) {\r\n    let currentQueryMethod = isWillLike ? 'PUT' : 'DELETE';\r\n\r\n    return fetch(`${this.baseUrl}/cards/likes/${cardId}`, {\r\n      method: currentQueryMethod,\r\n      headers: this.headers\r\n    })\r\n      .then(res => this._checkPromise(res));\r\n  }\r\n\r\n  // Публичный метод изменения на сервере аватара пользователя\r\n  patchAvatar(avatar) {\r\n    return fetch(`${this.baseUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this.headers,\r\n      body: JSON.stringify(avatar)\r\n    })\r\n      .then(res => this._checkPromise(res));\r\n  }\r\n}\r\n\r\nexport { Api };\r\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport Footer from './Footer';\nimport { api } from '../utils/utils.js';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext.js';\n\nfunction App() {\n  // Определяем переменные внутреннего состояния\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState('');\n  const [currentUser, setCurrentUser] = React.useState('');\n  const [cards, setCards] = React.useState([]);\n\n  React.useEffect(() => {\n    // Загружаем информацию о пользователе\n    api.getUserInfo()\n      .then((initialUserInfo) => {\n        setCurrentUser(initialUserInfo);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, []);\n\n  React.useEffect(() => {\n    // Загружаем начальные карточки\n    api.getInitialCards()\n      .then((initialCards) => {\n        setCards(initialCards);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }, []);\n\n  function handleCardLike(card) {\n    // Снова проверяем, есть ли уже лайк на этой карточке\n    const isLiked = card.likes.some(i => i._id === currentUser._id);\n\n    // Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(card._id, !isLiked)\n      .then((newCard) => {\n        // Формируем новый массив на основе имеющегося, подставляя в него новую карточку\n        const newCards = cards.map((c) => c._id === card._id ? newCard : c);\n        // Обновляем стейт\n        setCards(newCards);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  function handleCardDelete(card) {\n\n    // Отправляем запрос в API, удаляя свою карточку\n    api.deleteCard(card._id)\n      .then(() => {\n        // Формируем новый массив на основе имеющегося, исключая из него удалённую карточку\n        const newCards = cards.filter((c) => c._id != card._id);\n        // Обновляем стейт\n        setCards(newCards);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(!isEditProfilePopupOpen);\n  }\n\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(!isAddPlacePopupOpen);\n  }\n\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(!isEditAvatarPopupOpen);\n  }\n\n  // Функция принимает объект с данными нажатой карточки от \"посреднического\" пропса\n  function handleCardClick(card) {\n    setSelectedCard({\n      link: card.link,\n      name: card.name\n    });\n  }\n\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setSelectedCard('');\n  }\n\n  function handleUpdateUser(inputListValuesObject) {\n    // Редактируем профиль\n    api.patchProfileInfo(inputListValuesObject)\n      .then((newUserInfo) => {\n        setCurrentUser(newUserInfo);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  function handleUpdateAvatar(inputValueObject) {\n    // Меняем аватар\n    api.patchAvatar(inputValueObject)\n      .then((editedAvatar) => {\n        setCurrentUser(editedAvatar);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  function handleAddPlaceSubmit(inputValueObject) {\n    // Добавляем новую карточку\n    api.postNewCard(inputValueObject)\n      .then((newCardObject) => {\n        // Обновляем стейт расширенной копией текущего массива\n        setCards([...cards, newCardObject]);\n        closeAllPopups();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  // Возвращаем JSX-разметку компонента App\n  return (\n    <div className=\"page\">\n      <CurrentUserContext.Provider value={currentUser}>\n        <Header />\n        <Main onEditProfile={handleEditProfileClick} onAddPlace={handleAddPlaceClick} onEditAvatar={handleEditAvatarClick} selectedCard={selectedCard} onCardImage={handleCardClick} onCloseAllPopups={closeAllPopups} cards={cards} onCardLike={handleCardLike} onCardDelete={handleCardDelete} />\n        <EditProfilePopup isOpen={isEditProfilePopupOpen} onClose={closeAllPopups} onUpdateUser={handleUpdateUser} />\n        <EditAvatarPopup isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups} onUpdateAvatar={handleUpdateAvatar} />\n        <AddPlacePopup isOpen={isAddPlacePopupOpen} onClose={closeAllPopups} onAddPlace={handleAddPlaceSubmit} />\n        <Footer />\n      </CurrentUserContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/header-logo.855a8c98.svg\";"],"sourceRoot":""}